---
layout: post
author: 한성희, 이호욱, 한경수
date: 2016-10-14 17:48 +0900
tags: 
comments: true
---

# 개요
Interrupt 방식을 활용하여 GPIO 제어 및 UART 통신. 외부 입력을 통해 interrupt 를 발생시키고 그 interrupt 를 이용하여 UART 를 동작시킨다. 

# 세팅

## eclipse
5주차 실험의 scatter file을 위한 setting과 6주차 실험의 라이브러리를 추가 이후만 살펴보겠다.
C++ 프로젝트는 동작하지 않는 경우가 많기 때문에 C 프로젝트를 생성하였다.
![](../images/experiment04/cproject.PNG)

<br>
그리고 STM32 Peripheral Library를 추가하였다.
여기서 stm32f10x_conf.h, stm32f10x_it.h, stm32f10x_it.c를 프로젝트 폴더에 추가하였기 때문에
프로젝트 폴더를 새롭게 추가해 주었다.
![](../images/experiment04/tree.PNG)
![](../images/experiment04/include.PNG)

*그 외 자질구레한 세팅 추가???



# 기본 개념 

## Event 처리

CPU가 특정 event를 기다릴때, Interrupt 와 Polling 두 가지 방식이 있다.

<br>

### Polling

![](../images/experiment04/polling.jpg)

Polling 방식은 CPU 가 특정 event의 발생을 처리하기 위해 event가 발생할때까지 모든 연산을 event가 발생하는지 감시하는데 소모한다.
특정 주기를 가지고 그 주기마다 신호가 입력 되었는지 검사하는 방식이다. 구현이 쉽지만 시스템 성능 저하의 원인이 될 수 있다.

<br>

### Interrupt

![](../images/experiment04/interrupt.jpg)

Interrupt 방식은 CPU 가 다른 연산을 수행하고 있던 도중이라도 특정 event가 발생하면 연산을 멈추고 Interrupt Service Routine 을 수행한다. 
event 수행이 끝나면 다시 이전 작업으로 돌아간다. 구현은 복잡하지만 처리가 정확하고 시스템 부하를 줄일 수 있다. 

임베디드 시스템에서는 주로 software interrupt 가 소프트웨어적으로 발생하는 것이 아니라, 별더의 hardware interrupt 와 동일한 vector table 에 들어가서 동작한다. 

1. Software Interrupt 

software interrupt 는 동기식 event 처리로 사용자가 프로그램 내에서 interrupt 가 발생하도록 설정하는 것이다. 즉, 현재 실행하고 있는 instruction 으로부터 interrupt 발생 요청을 받는다. 

<br>
- Program Interrupt : 프로그램 실행 중 프로그램상 오류나 예외 상태 발생으로 인한 interrupt.

- Supervisor Call Interrupt : 프로그램 내에서 특별한 service 를 요구하거나, 운영체제의 감시 프로그램이 의도적으로 발생하는 경우에 실행되는 interrupt. 

<br>
2. Hardware Interrupt

hardware interrupt 는 비동기식 event 처리로 peripheral(주변장치) 의 요청에 의해 발생하는 interrupt 이다. 

<br>

### Supervisor calls

supervisor call 은 OS 의 작동 모드를 user-level program mode 로부터 supervisor mode 로 전환할 수 있는 instruction 이다. 
instruction set 으로 특별한 instruction, SWI(SoftWare Interrupt, Supervisor Call) 를 포함한다. 

![](../images/experiment04/supervisor.JPG)

text string 을 출력하는 subroutine 예시. 

<br>

### ARM Exceptions

ARM exception 은 다양한 interrupts, traps, supervisor calls 을 지원한다. 

exception handling 방식은 다음과 같다. 
```
1. PC 값을 r14_exc 그리고 CPSR 을 SPSR_exc 에 복사하여 저장함으로써 현재 상태를 저장한다. 

2. precessor operation mode 에서 exception mode 로 전환된다. 

3. PC 는 exception 종류에 따라 특정한 값을 가진 0x00 ~ 0x1C 사이의 값을 가진다.

4. PC 에 저장된 명령어는 exception handler 로의 branch를 가진다;
exception handler는 memory stack에 몇몇의 user register를 저장하기 위해 r13_exc 를 사용한다. 

5. user register, PC와 CPSR 을 복원한다. 
```

<br>

### Excpetion Handling 과 Vector Table

![](../images/experiment04/exception_vectorTable.JPG)

위 그림은 vector table 이다. 

excption 이 발생하면 CPSR을 SPSR_<mode> 로 복사한다. 적절한 CPSR bits 를 설정한다. 적절한 banked register 에 mapping 시킨다. 
LR_<mode> 에 return address 를 저장한다. PC 를 vector address 로 set 한다. 

예외 처리 후, exception handler 는 SPSR_<mode> 로부터 CPSR 을 복원시키고 LR_<mode> 로부터 PC 를 복원시킨다. 

<br>

### NVIC & EXTI

#### NVIC(Nested Vectored Interrupt Controller)

![](../images/experiment04/Nested.JPG)

NVIC 는 중첩된 interrupt 를 제어하는 기능이다. 모든 exception 에 대해 priority 가 설정되어 있고 이 우선순위에 따라
interrupt 를 처리한다. interrupt 가 발생해 core(Cortex-M3) 로 알려주면 core 에서 interrupt handler 를 호출할지, 무시할지 등을 결정하는 역할이다. 
ISER(Interrupt Set Enable Register), ICER(Interrupt Clear Enable Register) register 를 통해 interrupt 발생 여부를 결정하며, 
각 interrupt 의 priority 을 인위적으로 IP를 통해 변경 가능하다. 

Cortex-M3 는 240개의 Interrupt 를 NVIC 로 제어 가능하다. 

<br>
Interrupt 의 priority 를 매겨서 처리할 때는 두가지가 있다. 

>1. preemtion : priority 가 높은 interrupt 가 들어올 때 현재 작업을 멈추고 해당 interrupt 를 진행.

>2. subpriority : interrupt 수행 중이 아닌, 대기 중에 있어서 priority 가 높은 것을 먼저 수행.   


<br>
NVIC 는 Interrupt를 interrupt variable 에 mapping 한다. 

![](../images/experiment04/NVIC.jpg)

표를 보면 EXTI0, 1, 2, 3, 4, 5-9, 10-15 로 vector 값이 나누어진다. priority 는 0이 높고 10-15가 가장 낮다. 

<br>

#### EXTI(External Interrupt/Event Controller)

EXTI 는 외부에서 신호가 입력될 경우 device 에 event 나 interrupt 가 발생되는 기능이다.
입력 받을 수 있는 신호는 rising edge, falling edge, rising & falling edge 이다. 각 port 의 n 번 pine은 EXTIn 에 연결된다. 

EXTI는 event mode 와 interrupt mode 를 선택하여 설정할 수 있는데, 
interrupt mode 로 설정할 경우 interrupt 가 발생해 해당 interrupt handler 가 동작한다. 

20개의 edge detector line 으로 구성되어 각 line이 설정에 따라 rising / falling trigger 를 감지한다. 
interrupt request 는 mask register 를 통해 알 수 있다. 

processor 는 interrupt 를 인지하여 처리하기 전에 pending register(어떤 interrupt가 발생되었는지 저장) 를 
검사하여 발생된 interrupt 중 priority 가 가장 높은 interrupt 를 처리한다. 

![](../images/experiment04/EXTI.jpg)

외부 interrupt 는 EXTI10 ~ EXTI15 까지 각 port 의 pin 번호가 interrupt pin 과 매치된다. 

<br>

### I/O System

I/O는 memory mapped 형태로, peripheral 의 내부적인 레지스터들은 ARM memory map 내부의 특정 위치에 있고 
load-store instruction 을 사용하여 읽거나 쓸 수 있다. 
Peripheral 은 normal interrupt(IRQ) 또는 fast interrupt(FIQ) input 을 사용한다. 
몇몇의 system 은 높은 대역폭의 I/O traffic 을 다루기 위해 외부적으로 DAM hardware를 포함한다. 

<br>

### Parity

![](../images/experiment04/parity.JPG)

Parity 는 asynchronous link 에서 사용되는 error detection 기술이다. 
정보의 전달 과정에서 오류가 발생했는 지를 검사하기 위해 parity bits 를 1bit 더해서 데이터를 전송한다. 

2가지 종류의 parity bits 가 있다. 

<br>
1. Odd Parity

전체 bit 에서 1의 개수가 홀수가 되도록 parity bits 를 정하는 것인데, 이를 테면 data bits 에서 1의 개수가
짝수이면 parity bits 를 1로 정한다. 

<br>
2. Even Parity

전체 bit 에서 1의 개수가 짝수가 되도록 parity bits 를 정하는 방법이다. 

<br>
<br>
![](../images/experiment04/parity_example.JPG)

위는 각 ASCII 값을 보냈을 때 얻을 수 있는 parity bits 결과이다. 

<br>
<br>

#납땜

만능기판에 받은 핀을 납땜한다. 

##납땜하는 법

![](../images/experiment04/soldering2.jpg)
 
위 그림과 같이 초록색 만능기판에 제공받은 핀을 개발 보드와 연결 가능 하도록 하얀 표시 부분의 크기에 맞게 핀을 잘라 납땜한다. 

![](../images/experiment04/soldering.jpg)

위는 납땜한 결과이다. 

![](../images/experiment04/soldering3.jpg)

납땜이 완료되면 위와 같이 개발 보드와 연결할 수 있다. 

<br>
![](../images/experiment04/soldering4.jpg)

납땜을 하다보면 인두에 납 잔해가 뭉치게 되는데, 그땐 제공받은 수세미에 인두를 문지른다. 이때 튀지 않게 조심해야한다.

<br>
<br>

# 구현 


# 실험 결과


![](../images/experiment04/terminal.PNG)

terminal을 통해 확인한 결과

<br>
<br>
![](../images/experiment04/w.jpg)

오실로스코프로 송신한 메세지를 확인한다.  오실로스코프로 data bits 를 읽는 것은 저번 실험에서 했기 때문에 설명은 생략한다. 
처음 부분의 bits 를 확인하면, 0101 0111 로 W 가 들어온 것을 확인할 수 있다. 

<br>
UART 메세지를 전송(interrupt 발생시)을 하여 오실로스코프를 이용하여 parity bits 를 확인한다. 

<br>
<br>
![](../images/experiment04/origin.jpg)

terminal 을 이용하여 "0xAB" 를 보낸 결과이다. 파형의 data bit 부분이 1101 0101 로 나타나 있는데, 반대로 읽으면 0xAB 가 된다. 

<br>
1. Odd parity 설정을 한 경우

![](../images/experiment04/odd.jpg)

첫 부분을 보면, 1101 0101 의 파형을 확인할 수 있다. 여기서 맨 오른쪽 bit = 1 이 parity bits 에 해당된다. 

우리 조에서 word length 를 8bits 로 설정해서 parity bits 검출 시, 
start bits 를 제외하여 7bits 의 data bits 와 1bits 의 parity bits, stop bits 순서대로 얻을 수 있다. 

이렇게 되면 우리가 보낸 word 는 8bits 이지만 검출 시, 7bits 의 data 만 얻을 수 있어 마지막 data bits 가 제대로 됬는지 확인할 수 없는 문제가 발생한다. 

만약 우리 조에서 9bits의 data 를 전송했다면, parity 검출 결과로 1101 01010 이 나왔을 것이다. 그렇게 되면 parity bits = 0 이 된다. 

<br>
2. Even parity 설정을 한 경우

![](../images/experiment04/even.jpg)

첫 부분을 보면, 1101 0100 의 파형을 확인할 수 있다. 여기서 맨 오른쪽 bit = 0 이 parity bits에 해당된다. 

위에서 말했듯이 이는 word length 를 8bits 로 한 결과임으로 9bits 를 보낸다면, 1101 01011 이 나왔을 것이다. 그렇게 되면 parity bits = 1 이 된다. 

<br>

# 결론


# 전체 소스

``` cpp
#include "stm32f10x.h"

/* User defined function prototypes */

void Delay(int d){
  int i=0;
  for(i=0; i<1000000; i++){
    ;
  }
}

void send_string(char buf[]) {
  char *s = buf;
  while (*s) {
    while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)
      ;
    USART_SendData(USART1, *s++);
  }
}

void GPIOD_Init(void);
void USART1_Init(void);
void led_toggle(void);
void EXTI11_Config(void);

int main(void)
{
  /* Initialize GPIOA PIN8 */
  GPIOD_Init();
  /* Initialize USART1 */
  USART1_Init();
  //  Configure_PD0();
  EXTI11_Config();
  //  AFIO_EXTICR3_EXTI11 = AFIO_EXTICR3_EXTI11_PD;


  /*RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);*/
  /*GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;*/
  /*GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;*/
  /*GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;*/
  /*GPIO_Init(GPIOD, &GPIO_InitStructure);*/

  while(1)
  {
    // 踰꾪듉 �낅젰��
    /*USART_SendData(USART1, 'T');*/
    /* Do nothing, all happens in ISR */
  }
}

/***********************************************
 * Initialize GPIOA PIN8 as push-pull output
 ***********************************************/
void GPIOD_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOD, &GPIO_InitStructure);

  /*RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);*/
  /*GPIO_Init(GPIOD, &gpioa_init_struct); */
  /*GPIO_SetBits(GPIOA, GPIO_Pin_8);*/
}

/*****************************************************
 * Initialize USART1: enable interrupt on reception
 * of a character
 *****************************************************/
void USART1_Init(void)
{
  /* USART configuration structure for USART1 */
  USART_InitTypeDef usart1_init_struct;
  /* Bit configuration structure for GPIOA PIN9 and PIN10 */
  GPIO_InitTypeDef gpioa_init_struct;

  /* Enalbe clock for USART1, AFIO and GPIOA */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO |
      RCC_APB2Periph_GPIOA, ENABLE);

  /* GPIOA PIN9 alternative function Tx */
  gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
  gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
  gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOA, &gpioa_init_struct);
  /* GPIOA PIN9 alternative function Rx */
  gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
  gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
  gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOA, &gpioa_init_struct);

  /* Enable USART1 */
  USART_Cmd(USART1, ENABLE);
  /* Baud rate 9600, 8-bit data, One stop bit
   * No parity, Do both Rx and Tx, No HW flow control
   */
  usart1_init_struct.USART_BaudRate = 9600;
  usart1_init_struct.USART_WordLength = USART_WordLength_8b;
  usart1_init_struct.USART_StopBits = USART_StopBits_1;
  usart1_init_struct.USART_Parity = USART_Parity_No;
  usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  /* Configure USART1 */
  USART_Init(USART1, &usart1_init_struct);
  /* Enable RXNE interrupt */
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
  /* Enable USART1 global interrupt */
  NVIC_EnableIRQ(USART1_IRQn);
}

void EXTI11_Config(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  /* Enable GPIOA clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);


  /* Configure PA.00 pin as input pull down */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
  GPIO_Init(GPIOD, &GPIO_InitStructure);


  /* Enable AFIO clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);

  /* Connect EXTI0 Line to PA.00 pin */
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource11);


  EXTI_InitStructure.EXTI_Line = EXTI_Line11;
  /* Enable interrupt */
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  /* Interrupt mode */
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  /* Triggers on rising and falling edge */
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
  /* Add to EXTI */
  EXTI_Init(&EXTI_InitStructure);

  /* Add IRQ vector to NVIC */
  /* PB12 is connected to EXTI_Line12, which has EXTI15_10_IRQn vector */
  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
  /* Set priority */
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
  /* Set sub priority */
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
  /* Enable interrupt */
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  /* Add to NVIC */
  NVIC_Init(&NVIC_InitStructure);
}

/*******************************************
 * Toggle LED
 *******************************************/
void led_toggle(void)
{
  GPIO_SetBits(GPIOD, GPIO_Pin_2);
  Delay(1000);
  GPIO_ResetBits(GPIOD, GPIO_Pin_2);
  Delay(1000);
}

/**********************************************************
 * USART1 interrupt request handler: on reception of a
 * character 't', toggle LED and transmit a character 'T'
 *********************************************************/
void USART1_IRQHandler(void) {
  char buf;
  int i = 0;
  /* RXNE handler */
  if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
    USART_ClearITPendingBit(USART1, USART_IT_RXNE);
    buf = (unsigned char) USART_ReceiveData(USART1);
    for (i = 0; i < buf; i++) {
      led_toggle();
    }

  }
  //	USART_ClearITPendingBit(USART1, USART_IT_RXNE);
}

void EXTI15_10_IRQHandler(void) {
  /* Make sure that interrupt flag is set */
  unsigned char buf[] = "Wed_team07";

  /* RXNE handler */

  if (EXTI_GetITStatus(EXTI_Line11) != RESET) {
    send_string(buf);
  }

  /* Clear interrupt flag */
  EXTI_ClearITPendingBit(EXTI_Line11);
}
```

