---
layout: post
author: 한성희, 이호욱, 한경수
date: 2016-10-07 17:48 +0900
tags: 
comments: true
---

# 개요
비동기(UART) 통신에 대해서 알아보는 실험이다. 다른것으로 USART 가 있는데 이것은 동기화 통신이라고 UART, 즉 비동기까지 지원하는 통신방법이다.
이번 실험에서는 UART 를 이용하여 테스트를 해봤다. UART 통신 동작의 이해는 여러 응용장치를 만드는데, 매우 필요한 기술이다. 
비동기 통신 방법이 플래그 체크에 의한 Polling, 인터럽트 방식 등등이 있는데 우리가 실험해본 방식은 Polling 방식이다.

이 과정에서 오실로스코프 파형 관찰을 통한 전자적 신호에 대한 디버깅도 배울 수 있다.  

# 세팅

## eclipse
이전의 실험에서 rvc 나 기타 db 는 이미 생성되었다고 가정하고, eclipse 에서 추가적으로 stm32 에 대한 library 를 include 에 넣어놓는다.
scatter 를 이용한 방식이 아닌 첫 실험때 사용한 방식으로 flash load 를 시킨다. 


## 오실로스코프

먼저 커플링 DC 를 선택한다. 그리고 프로브를 보드 확장 포트의 GND 에 연결하고, 나머지 하나의 연결 고리를  우리가 측정하고자 하는 port 에 접촉시킨다.
GND 는 공유되어있기 때문에 확장포트의 아무곳이나 프로브로 집으면 되고, PortA8, PortA9, PorA10 중에 하나에 연결하여 원하는 전압을 측정하면 된다.

[그림]
그림과 같이 ch1 으로 파형을 관찰한다.

## RS-232C

[그림]
위 그림과 같은 RS-232C 포트는 양방향 통신이 가능하며 각 단말에 TX, RX 가 쌍으로 있다. 그래서 한쪽에서 보내는것도 가능하고, 받는것도 가능하다. 
컴퓨터와 기기와 RS-232C 를 연결하면 컴퓨터의 장치관리자에 보면 COM port 가 추가로 잡힌모습을 볼 수 있는데, 만약 com port 의 번호가 우리가 원하지 않는 번호로 잡혀있다면 com port 수정을 해줄 수 있다. 
터미널프로그램이 높은 번호의 com port 는 인지 못하는 경향이 있으니 꼭 체크한다.  





[그림] 
전체적인 기계 연결 모습




#기본 개념 

# 구현 








# 결론




# 전체 소스
``` cpp 
#include "stm32f10x_gpio.h"
#include "stm32f10x.h"
#include "stm32f10x_usart.h"
#include <vector>
#include <string>
using namespace std;
#define STM32F10X_CL

void delay(){
  for(int i = 0; i < 1000000; i++);
}

void SysInit(void) {
  /* Set HSION bit */
  /* Internal Clock Enable */
  RCC->CR |= (uint32_t) 0x00000001;


  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
  RCC->CFGR &= (uint32_t) 0xF0FF0000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t) 0xFEF6FFFF;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t) 0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t) 0xFF80FFFF;

  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t) 0xEBFFFFFF;

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
}

void SetSysClock(void)
{
  volatile uint32_t StartUpCounter = 0, HSEStatus = 0;

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;

    /* Flash 0 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;

    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV2;

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV2;

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;

    /* Configure PLLs ------------------------------------------------------*/
    /* PLL configuration: PLLCLK = ???? */
    // HSE = 25, PREDIV1_div2 : /2 , PLLMULL4: *4
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
        RCC_CFGR_PLLMULL4);

    /* PLL2 configuration: PLL2CLK = ???? */
    /* PREDIV1 configuration: PREDIV1CLK = ???? */
    // HSE, MUL_0,
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
        RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL12 |
        RCC_CFGR2_PREDIV1SRC_PLL2  | RCC_CFGR2_PREDIV1_DIV5);

    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
    RCC->CFGR |= (uint32_t)RCC_CFGR_MCO_2;

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
    {
    }
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}

void UartInit(void) {
  /*---------------------------- RCC Configuration -----------------------------*/
  /* GPIO RCC Enable  */
  /* USART RCC Enable */
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_IOPCEN | RCC_APB2ENR_IOPDEN;
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN;

  /* USART Pin Configuration */
  GPIOA->CRH = (GPIO_CRH_MODE8 | GPIO_CRH_CNF8_1 | GPIO_CRH_MODE9 | GPIO_CRH_CNF9_1);

  /*---------------------------- USART CR2 Configuration -----------------------*/
  /* Clear STOP[13:12] bits */

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  USART1->CR2 &= ~(USART_CR2_STOP | USART_CR2_CPOL | USART_CR2_CPHA);


  /*---------------------------- USART CR1 Configuration -----------------------*/
  /* Clear M, PCE, PS, TE and RE bits */
  USART1->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE);

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);


  /*---------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  USART1->CR3 &= ~(USART_CR3_CTSE | USART_CR3_RTSE);

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */

  /* Write to USART CR3 */


  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  /* Determine the integer part */
  /* Determine the fractional part */
  USART1->BRR = 0xd0;
  /*---------------------------- USART Enable ----------------------------------*/
  /* USART Enable Configuration */
  USART1->CR1 |= USART_CR1_UE;
  /*---------------------------- USART DATA output -----------------------------*/
  /* USART DATA Transmission */
}

void SendData(int data){
  while(!(USART1->SR&USART_SR_TXE));
  USART1->DR = data & 0xFF;

  //µ¥ÀÌÅÍ¸¦ ´Ù º¸³»´Â °ÍÀ» ±â´Ù¸°´Ù
  //	while(!USART1->SR | !USART_SR_TXE));
}



int main() {
  RCC->APB2ENR = (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN); //0x3c;
  GPIOA->CRH = GPIO_CRH_MODE8 | GPIO_CRH_CNF8_1;
  GPIOC->CRH = (GPIO_CRH_MODE8 | GPIO_CRH_MODE9 | GPIO_CRH_MODE10 | GPIO_CRH_MODE11);
  GPIOC->IDR = 0x00000000;

  SysInit();
  SetSysClock();
  UartInit();


  /*---------------------------- USART DATA output -----------------------------*/
  //	char* names[] = {"hks", "lhw", "hsh"};

  int count = 0;
  while (1) {
    //		if((~GPIOC->IDR & (GPIO_IDR_IDR2) ) ){
    //			for(int i=0; i<strlen(names[count]); i++){
    //				SendData(names[count][i]);
    //			}
    //			delay();
    //			count++;
    //
    //			if(count >= 3){
    //				count = 0;
    //			}
    //		}

    if((~GPIOC->IDR & (GPIO_IDR_IDR2)) && count == 0){
      SendData('W');
      SendData('e');
      SendData('d');
      SendData('T');
      SendData('e');
      SendData('a');
      SendData('m');
      SendData('7');
      SendData(' ');
      SendData('H');
      SendData('K');
      SendData('S');
      SendData(' ');

      delay();
      count = (count+1)%3;
    }

    if((~GPIOC->IDR & (GPIO_IDR_IDR2)) && count == 1){
      SendData('W');
      SendData('e');
      SendData('d');
      SendData('T');
      SendData('e');
      SendData('a');
      SendData('m');
      SendData('7');
      SendData(' ');
      SendData('H');
      SendData('H');
      SendData('H');
      SendData(' ');

      delay();
      count = (count+1)%3;
    }

    if((~GPIOC->IDR & (GPIO_IDR_IDR2)) && count == 2){
      GPIOD->BSRR = GPIO_BSRR_BS2;
      SendData('W');
      SendData('e');
      SendData('d');
      SendData('T');
      SendData('e');
      SendData('a');
      SendData('m');
      SendData('7');
      SendData(' ');
      SendData('L');
      SendData('H');
      SendData('W');
      SendData(' ');

      delay();
      count = (count+1)%3;
    }
  }
}
```
